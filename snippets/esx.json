{
  "Register Command": {
    "prefix": "regcmd",
    "body": [
      "RegisterCommand('${1:command}', function(source, args, rawCommand)",
      "    ${2:-- your code here}",
      "end, false)"
    ],
    "description": "Register a FiveM server command"
  },
  "Trigger Client Event": {
    "prefix": "trigc",
    "body": [
      "TriggerClientEvent('${1:event}', ${2:target}, ${3:args})"
    ],
    "description": "Trigger a client event"
  },
  "Trigger Server Event": {
    "prefix": "trigs",
    "body": [
      "TriggerServerEvent('${1:event}', ${2:args})"
    ],
    "description": "Trigger a server event"
  },
  "Register NUI Callback": {
    "prefix": "nuicb",
    "body": [
      "RegisterNUICallback('${1:callback}', function(data, cb)",
      "    ${2:-- handle NUI data}",
      "    cb('${3:response}')",
      "end)"
    ],
    "description": "Register a callback from NUI"
  },
  "Send NUI Message": {
    "prefix": "sendnui",
    "body": [
      "SendNUIMessage({",
      "    type = '${1:type}',",
      "    ${2:dataKey} = '${3:dataValue}'",
      "})"
    ],
    "description": "Send a message to NUI"
  },
  "Set NUI Focus": {
    "prefix": "nuifocus",
    "body": [
      "SetNuiFocus(${1:true}, ${2:true})"
    ],
    "description": "Set NUI focus"
  },
  "Get Player Ped": {
    "prefix": "getped",
    "body": [
      "local ped = GetPlayerPed(-1)"
    ],
    "description": "Get the current player's ped"
  },
  "Spawn Vehicle": {
    "prefix": "spawnveh",
    "body": [
      "local vehicleName = '${1:adder}'",
      "RequestModel(GetHashKey(vehicleName))",
      "while not HasModelLoaded(GetHashKey(vehicleName)) do",
      "    Wait(0)",
      "end",
      "local x, y, z = table.unpack(GetEntityCoords(PlayerPedId()))",
      "local vehicle = CreateVehicle(GetHashKey(vehicleName), x, y, z + 1, GetEntityHeading(PlayerPedId()), true, false)"
    ],
    "description": "Spawn a vehicle"
  },
  "Draw Text 3D": {
    "prefix": "draw3d",
    "body": [
      "function DrawText3D(x, y, z, text)",
      "    local onScreen, _x, _y = World3dToScreen2d(x, y, z)",
      "    local px, py, pz = table.unpack(GetGameplayCamCoords())",
      "    local dist = GetDistanceBetweenCoords(px, py, pz, x, y, z, 1)",
      "",
      "    local scale = (1 / dist) * 2",
      "    local fov = (1 / GetGameplayCamFov()) * 100",
      "    scale = scale * fov",
      "",
      "    if onScreen then",
      "        SetTextScale(0.0, 0.35 * scale)",
      "        SetTextFont(0)",
      "        SetTextProportional(1)",
      "        SetTextColour(255, 255, 255, 215)",
      "        SetTextEntry(\"STRING\")",
      "        SetTextCentre(true)",
      "        AddTextComponentString(text)",
      "        DrawText(_x, _y)",
      "    end",
      "end"
    ],
    "description": "Draw 3D text in the world"
  },
  "Get Player From Id [ESX Server]": {
    "prefix": "esxfrid",
    "body": [
      "local xPlayer = ESX.GetPlayerFromId(source)"
    ],
    "description": "Get player data from ID"
  },
  "Get Player PlayerData [ESX Server]": {
    "prefix": "esxpdata",
    "body": [
      "local playerData = ESX.GetPlayerData()"
    ],
    "description": "Get the current player's ped"
  },
  "Add Inventory Item [ESX Server]": {
    "prefix": "esxadditem",
    "body": [
      "xPlayer.addInventoryItem('${1:item}', ${2:amount})"
    ],
    "description": "Add item to player's inventory"
  },
  "Register Add Inventory Item [ESX Event]": {
    "prefix": "esxadditem2",
    "body": [ 
      " RegisterNetEvent('esx:addInventoryItem', function(item, count)",
       " print(string.format('You have received %sx %s', count, item))",
      "end) "
    ],
    "description": "Register Add item event"
  },
  "Remove Inventory Item [ESX Server]": {
    "prefix": "esxremoveitem",
    "body": [
      "xPlayer.removeInventoryItem('${1:item}', ${2:amount})"
    ],
    "description": "Remove item from player's inventory"
  },
  "Get Item Count [ESX Server]": {
    "prefix": "esxgetitem",
    "body": [
      "local count = xPlayer.getInventoryItem('${1:item}').count"
    ],
    "description": "Get the amount of a specific inventory item"
  },
  "ESX Trigger Server Callback [Client]": {
    "prefix": "esxscb",
    "body": [
      "ESX.TriggerServerCallback('${1:eventName}', function(${2:result})",
      "    ${3:-- handle callback result here}",
      "end, ${4:args})"
    ],
    "description": "Trigger a server callback from client"
  },
  "ESX Register Server Callback [Server]": {
    "prefix": "esxrscb",
    "body": [
      "ESX.RegisterServerCallback('${1:eventName}', function(source, cb, ${2:args})",
      "    ${3:-- perform logic and call cb()}",
      "end)"
    ],
    "description": "Register a server-side ESX callback"
  },
  "ESX Show Notification [Client]": {
    "prefix": "esxnotify",
    "body": [
      "ESX.ShowNotification('${1:message}')"
    ],
    "description": "Show a notification to the player"
  },
  "ESX Add Money [Server]": {
    "prefix": "esxaddmoney",
    "body": [
      "xPlayer.addMoney(${1:amount})"
    ],
    "description": "Add money to player"
  },
  "ESX Remove Money [Server]": {
    "prefix": "esxremmoney",
    "body": [
      "xPlayer.removeMoney(${1:amount})"
    ],
    "description": "Remove money from player"
  },
  "ESX PlayerLoaded": {
    "prefix" :"esxplloaded",
    "body" : [
      "AddEventHandler('esx:playerLoaded', function (xPlayer, skin)",
      " // Data flow here",
      "end)"
    ]
  },

  "ESX OnPlayerDeath": {
    "prefix" :"esxpldeath",
    "body" : [
      "AddEventHandler('esx:onPlayerDeath', function (data)",
      " print(string.format('You were killed by %s from %s meters away.', data.killerServerId, data.distance))",
      "end)" 
    ]
  },


   "ESX OnPlayerSpawn": {
    "prefix" :"esxplspawn",
    "body" : [
     "AddEventHandler('esx:onPlayerSpawn', function ()",
     "  print('Player successfully loaded and his ped spawned.')",
     "end)"
    ]
  },


   "ESX SetJob": {
    "prefix" :"esxsetjob",
    "body" : [
    " RegisterNetEvent('esx:setJob')",
    "AddEventHandler('esx:setJob', function(job,lastJob)",
    " print('Player changed job! New job name: ' .. job.name .. ' Last job name: ' .. lastJob.name)",
    "end)"
    ]
  }

}
